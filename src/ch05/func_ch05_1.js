// 函数式编程异常处理
// 命令式编程中异常处理方式，通常就是try-catch
// 例如

/*
try {
  a + 1;
} catch (e) {
  console.log(e); // RefrenceError: a is not defined
}*/

// 正如使用函数抽象循环和条件分支一样，对于异常也需要进行抽象. 然而对于异常处理使用try-catch 不能与函数式程序结合，并且严重影响程序设计.

// 函数式程序不应该抛出异常，不然很难组合.
// 函数程序抛出异常导致的问题
/*
1. 很难与其他函数组合或连接
2. 违反引用透明规则，如果抛出异常，就导致函数出现另一个出口。函数单一返回值很难预测。
3. 副作用，对函数调用堆栈造成影响.
4. 违反局部性原则。
5. 不能单一处理返回值，还需要在catch块中维护，特定的异常类型。
6. 当有多个异常条件时，还需要使用嵌套的异常处理块.
*/

// 总结:   关于异常处理，异常应该由一个地方抛出，不应该随处可见.

// null 空值检查问题
// 异常解决方案 - Functor， 创建容器处理危险代码，可以时try-catch
// 包裹不安全的值, 函数编程中，函数本身被当做值来看待。而将值包裹起来，并且也保证了值的不可改变的可能。
